#
# StatefulSet for avalanche node
#
image:
  repository: avaplatform/avalanchego
  pullPolicy: IfNotPresent
  # avalanchego tag from docker hub
  # https://hub.docker.com/r/avaplatform/avalanchego/tags?page=1&ordering=last_updated
  tag: "v1.1.1"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

avalancheNode:
  containerPort: 9651
  command: '["/avalanchego/build/avalanchego"]'
  args: '["--dynamic-public-ip=opendns","--http-host=","--log-level=info"]'

# Persistent volume claim size
storage: "250Gi"

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

#
# Avalanche node metrics and managment service
#
# keep its name to "avalanchego" 
# to make it compatible with AvaLabs Grafana charts
managmentService:
  port: 9650
  name: "avalanchego"

#
# Avalanche node peer communication service
#
peerService:
  name: "avalanche-peer-svc"
  type: NodePort
  port: 9651

resources:
  limits:
    memory: 1.5Gi
  requests:
    memory: 1Gi

nodeSelector: {}

tolerations: []

affinity: {}

monitoring:
  enable: true

liveness: true
readiness: true

# use existing staking key
# the key must be provisioned to k8s using
# avax-cli.sh put <stakign-dir>
# where <stakign-dir> contains files staker.crt,staker.key
#stakingKey: ava-staking
